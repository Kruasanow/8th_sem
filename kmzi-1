from tkinter import filedialog
from tkinter import *  
from tkinter import Label
from tkinter.font import BOLD


global index_eng # Индекс совпадений для английского языка
index_eng =  0.0667
# Алфавит с частотой повторений
alf = {'A':0.082, 'B':0.015, 'C':0.027, 'D':0.043, 'E':0.13, 'F':0.022, 'G':0.02, 'H':0.062, 'I':0.069, 'J':0.0015, 'K':0.0078, 'L':0.041, 'M':0.025, 'N':0.067, 'O':0.078, 'P':0.019, 'Q':0.00096, 'R':0.059, 'S':0.062, 'T':0.096, 'U':0.027, 'V':0.0097, 'W':0.024, 'X':0.0015, 'Y':0.02, 'Z':0.00078}
# Убрать повторяющийся ключ
def short_key(list_len_shift):
    fact = []
    for i in range(2, len(list_len_shift) - 1):
        if len(list_len_shift)/i - int(len(list_len_shift)/i) == 0:
            fact.append(i)
    for i in range(len(fact)):
        k = 0
        for j in range(fact[i]):
            if list_len_shift[j] != list_len_shift[j+fact[i]]:
                continue
            else:
                k += 1
        if k == fact[i]:
            print(list_len_shift[:fact[i]])
            return  list_len_shift[:fact[i]]
    return list_len_shift
# Нахождение сдвига с наименьшей дисперсией
def min_D(frequency, alf):
    D = []
    for i in range(len(alf)):
        sum = 0
        for j in range(len(alf)):
            sum += (alf[(j+i)%26] - frequency[j]) ** 2
        D.append(sum)
    return D.index(min(D))
# Нахождение частот символов    
def find_frequency(s, L, enter):
    n = 0
    frequency = {}
    # Задание алфавита
    for i in range(26):
        frequency[chr(65+i)] = 0
    # Подсчет кол-ва совпадений
    for i in range(enter,len(s),L): 
        frequency[s[i]] += 1
        n += 1
    for i in range(65,91):
        frequency[chr(i)] = frequency[chr(i)]/n 
    return frequency
# Перевод текста в строку без лишних символов
def text_to_str(s):
    line = ''
    for i in range(len(s)):
        if ord(s[i])<91 and ord(s[i])>64:
            line += s[i]
    return line
# Перевод словаря в список
def alf_to_list(dict_):
    new_list = []
    for i in range(65,91):
        new_list.append(dict_[chr(i)])
    return new_list
# Вычисление индекса совпадений
def index_s(s,L):
    sum = 0
    n = 0
    frequency = {}
    # Задание алфавита
    for i in range(26):
        frequency[chr(65+i)] = 0
    # Подсчет кол-ва совпадений
    for i in range(0,len(s),L): 
        frequency[s[i]] += 1
        n +=1
    #
    for i in range(26):
        sum += frequency[chr(65+i)]*(frequency[chr(65+i)]-1)
    sum = sum/(n*(n-1))
    return sum
# Расшифрование текста
def decrypt(text, list_len_shift): 
    decrypt_text = ''
    len_main_text = 0
    for i in range(len(text)):
        if 64 < ord(text[i]) and ord(text[i]) < 91:
            len_main_text += 1
            index = ((ord(text[i]) - 65) + list_len_shift[(len_main_text - 1) % len(list_len_shift)]) % 26
            decrypt_text += chr(index + 65)
        else:
            decrypt_text += text[i]
    return decrypt_text
def btn():
    dif = []
    arr_index_s = []
    filetypes = (("Текстовый файл", "*.txt"),)
    my_file = filedialog.askopenfile(title="Открыть файл", filetypes=filetypes)

    if my_file:
        text = my_file.read()
        my_file.close()
    for i in range(1,21):
        arr_index_s.append(index_s(text_to_str(text),i))
    for i in range(len(arr_index_s)):
        dif.append(abs(arr_index_s[i] - index_eng))
    key_len = 1 + dif.index(min(dif))
    alf_list = alf_to_list(alf)
    list_len_shift = []
    for i in range(key_len):
        frequency = find_frequency(text_to_str(text), key_len, i)
        frequency_list = alf_to_list(frequency)
        list_len_shift.append(min_D(frequency_list, alf_list))  
        frequency.clear()
        frequency_list.clear()
    key_word = ''
    list_len_shift = list(short_key(list_len_shift))
    for i in range(len(list_len_shift)):
        key_word += chr(65+(26-list_len_shift[i])%26)
    key_len = len(list_len_shift)
    print(key_len)
    print(list_len_shift)
    print(key_word)
    file_name = filedialog.asksaveasfilename(title="Сохранить файл", filetypes=filetypes)
    file = open(file_name, 'w')
    file.write(decrypt(text, list_len_shift))
    file.close()
    txt1.config(text = key_len) 
    txt2.config(text = key_word) 
window = Tk()  
window.title("Дешифрование")  
window.config(bg = '#85144B')  
btn1 = Button(window, text="Выбрать файл и дешифровать", font = BOLD,height=2, width=60, bg = '#FFDC00', fg= '#85144B', command=btn)  #
btn1.grid(column=0, row=0, columnspan= 2)  
lbl1 = Label(window, text="Длина ключевого символа: ",width= 30, bg = '#85144B', fg='#FFDC00')  
lbl1.grid(column=0, row=1)  
txt1 = Label(window, height=8, bg = '#85144B', fg='#FFDC00')  
txt1.grid(column=1, row=1, sticky= W + E)
lbl2 = Label(window, text="Ключевое слово: ",width= 30, bg = '#85144B', fg='#FFDC00')  
lbl2.grid(column=0, row=2)  
txt2 = Label(window, height=8, bg = '#85144B', fg='#FFDC00')  
txt2.grid(column=1, row=2, sticky= W + E)
window.mainloop()
